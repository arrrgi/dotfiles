{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Dotfiles","text":""},{"location":"#description","title":"Description","text":"<p>Opinionated dotfiles for *nix based personal and work development environments, managed by Chezmoi.</p>"},{"location":"#installation","title":"Installation","text":"<p>Requirements:</p> <ol> <li>Ubuntu (VM, Baremetal or WSL) or MacOS target operating system</li> <li>curl installed in target operating system</li> </ol> <p>Run:</p> <pre><code>sh -c \"$(curl -fsLS get.chezmoi.io/lb)\" -- init --apply arrrgi [--branch=ref] --use-builtin-git=true\n</code></pre>"},{"location":"#dotfiles-decision-tree","title":"Dotfiles Decision Tree","text":"<p>Chezmoi runs context/OS specific scripts and applies relevant dotfiles using the high-level logic outlined.</p> <pre><code>graph TD\n  Start((Start))\n  Start --&gt; TTY{Is the session a TTY?}\n  TTY -- False --&gt; checkContainer{Is the session within&lt;br&gt;a Docker container?}\n  checkContainer -- True --&gt; setContainer[Set Container&lt;br&gt;context Variables]\n  setContainer --&gt; Success[End logic with&lt;br&gt;success message]\n  checkContainer -- False --&gt; Error[Exit with error message]\n  Error --&gt; Finish((Finish))\n  Success --&gt; ApplyTemplate[Apply Chezmoi Template]\n  ApplyTemplate --&gt; Finish\n  TTY -- True --&gt; promptName[Prompt for full name]\n  promptName --&gt; whichOS{Check OS Logic}\n  whichOS --&gt; checkMacOS{Is the OS MacOS?}\n  whichOS --&gt; checkWSL{Is the OS WSL?}\n  whichOS --&gt; checkUbuntu{Is the OS Ubuntu?}\n  whichOS -- Other --&gt; Error\n  checkWSL -- False --&gt; Error\n  checkUbuntu -- False --&gt; Error\n  checkMacOS -- True --&gt; setMacOS[Set MacOS&lt;br&gt;context Variables]\n  checkMacOS -- False --&gt; Error\n  checkWSL -- True --&gt; setWSL[Set WSL&lt;br&gt;context Variables]\n  checkUbuntu -- True --&gt; checkRootAccess{Do you have root access?}\n  checkRootAccess -- True --&gt; setUbuntuRoot[Set Ubuntu with root&lt;br&gt;context Variables]\n  checkRootAccess -- False --&gt; setUbuntuNormal[Set Ubuntu without root&lt;br&gt;context Variables]\n  setMacOS --&gt; Success\n  setWSL --&gt; Success\n  setUbuntuRoot --&gt; Success\n  setUbuntuNormal --&gt; Success</code></pre> <p>This could be interpreted as the following pseudo-Bash script which minimises the number of nested condition statements by using guard clauses. This aligns closely to the way the Chezmoi base template evaluates conditions, captures necessary inputs from stdin during installation and then executes context and OS specific scripts and config to the target environment.</p> <pre><code>#!/bin/bash\n\necho \"Start\"\necho \"-----\"\n\n# Check if the session is a TTY\necho \"Is this a TTY session? (y/n)\"\nread is_tty\n\nif [ \"$is_tty\" == \"n\" ]; then\n    # Check if the session is within a Docker container\n    echo \"Is the session within a Docker container? (y/n)\"\n    read is_container\n\n    if [ \"$is_container\" == \"y\" ]; then\n        # Set container context variables\n        echo \"Setting Container context variables...\"\n        # Perform necessary operations\n\n        echo \"End logic with success message\"\n        echo \"Apply Chezmoi Template\"\n    else\n        echo \"Exit with error message\"\n        echo \"Finish\"\n    fi\nelse\n    echo \"Is the OS MacOS? (y/n)\"\n    read is_macos\n\n    if [ \"$is_macos\" == \"y\" ]; then\n        # Set MacOS context variables\n        echo \"Setting MacOS context variables...\"\n        # Perform necessary operations\n\n        echo \"End logic with success message\"\n        echo \"Apply Chezmoi Template\"\n    elif [ \"$is_macos\" == \"n\" ]; then\n        echo \"Is the OS WSL? (y/n)\"\n        read is_wsl\n\n        if [ \"$is_wsl\" == \"y\" ]; then\n            # Set WSL context variables\n            echo \"Setting WSL context variables...\"\n            # Perform necessary operations\n\n            echo \"End logic with success message\"\n            echo \"Apply Chezmoi Template\"\n        else\n            echo \"Is the OS Ubuntu? (y/n)\"\n            read is_ubuntu\n\n            if [ \"$is_ubuntu\" == \"y\" ]; then\n                echo \"Do you have root access? (y/n)\"\n                read has_root_access\n\n                if [ \"$has_root_access\" == \"y\" ]; then\n                    # Set Ubuntu context variables with root\n                    echo \"Setting Ubuntu with root context variables...\"\n                    # Perform necessary operations\n\n                    echo \"End logic with success message\"\n                    echo \"Apply Chezmoi Template\"\n                elif [ \"$has_root_access\" == \"n\" ]; then\n                    # Set Ubuntu context variables without root\n                    echo \"Setting Ubuntu without root context variables...\"\n                    # Perform necessary operations\n\n                    echo \"End logic with success message\"\n                    echo \"Apply Chezmoi Template\"\n                else\n                    echo \"Exit with error message\"\n                    echo \"Finish\"\n                fi\n            else\n                echo \"Exit with error message\"\n                echo \"Finish\"\n            fi\n        fi\n    else\n        echo \"Exit with error message\"\n        echo \"Finish\"\n    fi\nfi\n</code></pre>"},{"location":"#license","title":"License","text":"<p>MIT</p>"},{"location":"colophon/","title":"Colophon","text":""},{"location":"design/","title":"Design Principals","text":""},{"location":"usage/","title":"Usage Instructions","text":""},{"location":"usage/#prerequisites","title":"Prerequisites","text":"<ol> <li>Windows Subsystem for Linux, OR</li> <li>MacOS, OR</li> <li>Ubuntu/Debian Linux (LTS or stable release)</li> </ol> <p>You will also need an AWS Secrets Manager configuration with an access key and secret already created, and preferably locked down to an IAM user with read only access to secrets. Record these beforehand as they are inputs during the dotfiles installation process.</p>"},{"location":"usage/#installation","title":"Installation","text":"<p>For WSL on Corporate devices, first ensure the companies CA certificate is installed on the WSL machine. This can be done by downloading the certificate from the company's website and then running the following command:</p> <pre><code>sudo cp &lt;path/to/certificate&gt;.crt /usr/local/share/ca-certificates/&lt;certificate&gt;.crt\nsudo update-ca-certificates\n</code></pre> <p>Then, ensure you have the following information ready:</p> <ol> <li>Full name</li> <li>Email address</li> <li>Git username</li> <li>(optional) Azure DevOps organization name</li> <li>AWS Access Key ID</li> <li>AWS Secret Access Key</li> <li>AWS Region (default: ap-southeast-2)</li> </ol> <p>Ideally, you have created an AWS IAM user with the necessary policy attached to read secrets from AWS Secrets Manager. The Access Key ID and Secret Access Key should be generated for this IAM user.</p> <p>Then, run the following command:</p> <pre><code>sh -c \"$(curl -fsLS get.chezmoi.io/lb)\" -- init --apply arrrgi --use-builtin-git=true\n</code></pre> <p>Done! After following the prompts and providing details, you should now have a fully configured environment.</p> <p>NOTE: It is also recommended to add the following to your <code>/etc/zsh/zshenv</code> and <code>/etc/profile</code> files to ensure that the Homebrew paths are set correctly for all users on Linux systems:</p> <pre><code>if [ -d \"/home/linuxbrew/.linuxbrew/bin\" ] &amp;&amp; [ -d \"/home/linuxbrew/.linuxbrew/sbin\" ]; then\n    export PATH=\"/home/linuxbrew/.linuxbrew/bin:/home/linuxbrew/.linuxbrew/sbin:$PATH\"\nfi\n</code></pre>"}]}