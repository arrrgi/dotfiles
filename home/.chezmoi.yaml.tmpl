{{/* Chezmoi config template */}}
{{/* Define dictionaries */}}
{{- $target := dict "darwin" false "wsl" false "devcontainer" false "ubuntu" false "debian" false -}}
{{- $function := dict "personal" false "work" false "hybrid" false -}}
{{- $access := dict "controlled" false "restricted" false -}}
{{- $privacy := dict "private" false "public" false -}}
{{- $state := dict "persistent" false "ephemeral" false -}}
{{- $secrets := dict "apikeys" false "sshkeys" false "storagekeys" false -}}
{{- $git := dict -}}

{{/* Test if the user is in a container by checking that a TTY is not present */}}
{{- if not stdinIsATTY -}}
  {{/* If the session is not in a TTY evaluates as true, then test for container specific environment variables and usernames */}}
  {{- if and (or (env "CODESPACES") (env "REMOTE_CONTAINERS")) (eq .chezmoi.username "vscode" "ubuntu") | not | not -}}
    {{/* Notify user target is an ephemeral container */}}
    {{- writeToStdout "Info: Target is a container.\n" -}}
    {{/* Set target, access, environment and secrets values. Git data is not required for Codespaces or Devcontainers */}}
    {{- $_ := set $target "devcontainer" true -}}
    {{- $_ := set $function "hybrid" true -}}
    {{- $_ := set $access "controlled" true -}}
    {{- $_ := set $privacy "private" true -}}
    {{- $_ := set $state "ephemeral" true -}}
    {{- writeToStdout "ðŸŒŸ Info: Done with container config.\n" -}}
  {{/* If the results are false, notify the user the target environment is not supported and exit with an error */}}
  {{- else -}}
    {{/* Notify that the target environment isn't supported and exit with an error */}}
    {{- writeToStdout "ðŸ›‘ Error: Container environment not detected. Exiting.\n" -}}
    {{- exit 1 -}}
  {{- end -}}
{{- else -}}
{{/* As the user is in an interactive TTY session, test for the target environment */}}
{{/* Notify the user that the session is interactive and prompt for the users full name */}}
  {{- writeToStdout "Info: Session is interactive.\n" -}}
  {{- writeToStdout "ðŸ’¡ Tip: You can re-enter prompted inputs with `chezmoi init --data=false`.\n" -}}
  {{/* Begin OS check conditionals and set context specific dictionary variables as true */}}
  {{/* Check for MacOS */}}
  {{- if eq .chezmoi.os "darwin" -}}
    {{/* Notify user the target is a personal MacOS device */}}
    {{- writeToStdout "Info: Target is MacOS-based personal device.\n" -}}
    {{/* Get full name from user to populate Git config */}}
    {{- $_ := set $git "name" (promptStringOnce $git "name" "What is your full name") -}}
    {{/* prompt for additional Git config data */}}
    {{- $_ := set $git "email" (promptStringOnce $git "email" "What is your Git associated email address") -}}
    {{- $_ := set $git "gh_username" (promptStringOnce $git "gh_username" "What is your GitHub username") -}}
    {{/* Set context specific dict values */}}
    {{- $_ := set $target "darwin" true -}}
    {{- $_ := set $function "personal" true -}}
    {{- $_ := set $access "controlled" true -}}
    {{- $_ := set $privacy "private" true -}}
    {{- $_ := set $state "persistent" true -}}
    {{/* Enable MacOS context secrets */}}
    {{- $_ := set $secrets "apikeys" true -}}
    {{- $_ := set $secrets "storagekeys" true -}}
    {{- writeToStdout "ðŸŒŸ Info: Done with MacOS config.\n" -}}
  {{/* Check of Linux variants */}}
  {{- else if eq .chezmoi.os "linux" -}}
    {{/* Check for WSL */}}
    {{- if and (eq .chezmoi.osRelease.id "ubuntu") (.chezmoi.kernel.osrelease | lower | contains "microsoft" ) -}}
      {{- writeToStdout "Info: Target is WSL-based work device.\n" -}}
      {{/* Get full name from user to populate Git config */}}
      {{- $_ := set $git "name" (promptStringOnce $git "name" "What is your full name") -}}
      {{/* Prompt for additional Git config data */}}
      {{- $_ := set $git "email" (promptStringOnce $git "email" "What is your Git associated email address") -}}
      {{- $_ := set $git "ado_username" (promptStringOnce $git "ado_username" "What is your Azure DevOps username") -}}
      {{- $_ := set $git "ado_org" (promptStringOnce $git "ado_org" "What is your Azure DevOps organization") -}}
      {{/* Set context specific dict values */}}
      {{- $_ := set $target "wsl" true -}}
      {{- $_ := set $function "work" true -}}
      {{- $_ := set $access "controlled" true -}}
      {{- $_ := set $privacy "private" true -}}
      {{- $_ := set $state "ephemeral" true -}}
      {{/* Enable WSL context secrets */}}
      {{- $_ := set $secrets "apikeys" true -}}
      {{- $_ := set $secrets "sshkeys" true -}}
      {{- writeToStdout "ðŸŒŸ Info: Done with WSL config.\n" -}}
    {{/* Check for Ubuntu with standard login equals personal server */}}
    {{- else if and (eq .chezmoi.osRelease.id "ubuntu") (eq .chezmoi.username "sysadm") (not (.chezmoi.hostname | lower | hasPrefix "vps")) -}}
      {{- writeToStdout "Info: Target is Ubuntu-based home lab.\n" -}}
      {{/* Set context specific dict values */}}
      {{- $_ := set $target "ubuntu" true -}}
      {{- $_ := set $function "personal" true -}}
      {{- $_ := set $access "controlled" true -}}
      {{- $_ := set $privacy "private" true -}}
      {{- $_ := set $state "persistent" true -}}
      {{/* Enable home lab context secrets */}}
      {{- $_ := set $secrets "apikeys" true -}}
      {{- $_ := set $secrets "storagekeys" true -}}
      {{- writeToStdout "ðŸŒŸ Info: Done with Ubuntu home lab config.\n" -}}
    {{/* Check for Ubuntu with non-standard login equals work server */}}
    {{- else if and (eq .chezmoi.osRelease.id "ubuntu") (ne .chezmoi.username "sysadm") -}}
      {{- writeToStdout "Info: Target is Ubuntu-based work server.\n" -}}
      {{/* Set context specific dict values */}}
      {{- $_ := set $target "ubuntu" true -}}
      {{- $_ := set $function "work" true -}}
      {{- $_ := set $access "restricted" true -}}
      {{- $_ := set $privacy "public" true -}}
      {{- $_ := set $state "persistent" true -}}
      {{- writeToStdout "ðŸŒŸ Info: Done with Ubuntu work server config.\n" -}}
    {{/* Check for Ubuntu with hostname pattern equals VPS server */}}
    {{- else if and (eq .chezmoi.osRelease.id "ubuntu") (.chezmoi.hostname | lower | hasPrefix "vps") -}}
      {{- writeToStdout "Info: Target is Ubuntu-based VPS server.\n" -}}
      {{/* Set context specific dict values */}}
      {{- $_ := set $target "ubuntu" true -}}
      {{- $_ := set $function "personal" true -}}
      {{- $_ := set $access "controlled" true -}}
      {{- $_ := set $privacy "public" true -}}
      {{- $_ := set $state "persistent" true -}}
      {{- writeToStdout "ðŸŒŸ Info: Done with Ubuntu VPS server config.\n" -}}
    {{/* Check for Debian with non-standard login equals media server */}}
    {{- else if and (eq .chezmoi.osRelease.id "debian") (ne .chezmoi.username "sysadm") -}}
      {{- writeToStdout "Info: Target is Debian-based media server.\n" -}}
      {{/* Set context specific dict values */}}
      {{- $_ := set $target "debian" true -}}
      {{- $_ := set $function "hybrid" true -}}
      {{- $_ := set $access "restricted" true -}}
      {{- $_ := set $privacy "public" true -}}
      {{- $_ := set $state "persistent" true -}}
      {{- writeToStdout "ðŸŒŸ Info: Done with Debian media server config.\n" -}}
    {{/* Otherwise end with an error message */}}
    {{- else -}}
      {{- writeToStdout "ðŸ›‘ Error: Dotfiles OS target not supported. Exiting.\n" -}}
      {{- exit 1 -}}
    {{- end -}}
  {{/* Otherwise end with an error message */}}
  {{- else -}}
    {{/* Notify user the target is not supported and exit with an error */}}
    {{- writeToStdout "ðŸ›‘ Error: Dotfiles target environment not supported. Exiting.\n" -}}
    {{- exit 1 -}}
  {{- end -}}
{{- end -}}

{{/* Write out the config as YAML with variable substitution */}}
diff:
  pager: delta
{{ if or $secrets.apikeys $secrets.sshkeys $secrets.storagekeys -}}
encryption: age
age:
  identity: "{{ $.chezmoi.homeDir }}/.config/age/key.txt"
  recipient: "age183zmhhlz4wg0a8qmweyzmm5cf0y0g4tyulxg8ldjzjmkgze2sqlsnvwuqs"
{{- end }}
{{ if eq .chezmoi.os "darwin" -}}
scriptEnv:
  {{ if eq .chezmoi.arch "arm64" -}}
  BREW_PATH: "/opt/homebrew/bin/brew"
  {{- else -}}
  BREW_PATH: "/usr/local/bin/brew"
  {{- end }}
{{- end }}
data:
  target:
    {{- range $key, $value := $target }}
    {{ $key }}: {{ $value }}
    {{- end }}
  function:
    {{- range $key, $value := $function }}
    {{ $key }}: {{ $value }}
    {{- end }}
  access:
    {{- range $key, $value := $access }}
    {{ $key }}: {{ $value }}
    {{- end }}
  privacy:
    {{- range $key, $value := $privacy }}
    {{ $key }}: {{ $value }}
    {{- end }}
  state:
    {{- range $key, $value := $state }}
    {{ $key }}: {{ $value }}
    {{- end }}
  secrets:
    {{- range $key, $value := $secrets }}
    {{ $key }}: {{ $value }}
    {{- end }}
  git:
    {{- range $key, $value := $git }}
    {{ $key }}: {{ $value | quote }}
    {{- end }}
